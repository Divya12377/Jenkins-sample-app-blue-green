pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = 'raheman456/sample-node-app'
        KUBE_NAMESPACE = 'jenkins'
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Determine Deployment Color') {
            steps {
                script {
                    // Check which version is currently active
                    def currentVersion = sh(
                        script: "kubectl get service sample-app-service -o jsonpath='{.spec.selector.version}' || echo 'blue'",
                        returnStdout: true
                    ).trim()
                    
                    if (currentVersion == 'blue') {
                        env.DEPLOY_VERSION = 'green'
                        env.CURRENT_VERSION = 'blue'
                    } else {
                        env.DEPLOY_VERSION = 'blue'
                        env.CURRENT_VERSION = 'green'
                    }
                    
                    echo "Current version: ${env.CURRENT_VERSION}"
                    echo "Deploying version: ${env.DEPLOY_VERSION}"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_HUB_REPO}:${env.DEPLOY_VERSION} ."
                    sh "docker push ${DOCKER_HUB_REPO}:${env.DEPLOY_VERSION}"
                }
            }
        }
        
        stage('Deploy New Version') {
            steps {
                script {
                    // Update the deployment YAML with new image
                    sh """
                        sed 's/your-dockerhub-username/${DOCKER_HUB_REPO.split('/')[0]}/g' app-${env.DEPLOY_VERSION}.yaml | \\
                        sed 's/sample-node-app:${env.DEPLOY_VERSION}/${DOCKER_HUB_REPO}:${env.DEPLOY_VERSION}/g' | \\
                        kubectl apply -f -
                    """
                    
                    // Wait for deployment to be ready
                    sh "kubectl rollout status deployment/sample-app-${env.DEPLOY_VERSION} --timeout=300s"
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    // Test the new deployment
                    sh """
                        kubectl run test-pod --image=curlimages/curl:latest --rm -i --restart=Never -- \\
                        curl -f http://sample-app-${env.DEPLOY_VERSION}-service/health
                    """
                }
            }
        }
        
        stage('Switch Traffic') {
            steps {
                script {
                    // Update service to point to new version
                    sh """
                        kubectl patch service sample-app-service -p '{"spec":{"selector":{"version":"${env.DEPLOY_VERSION}"}}}'
                    """
                    
                    echo "Traffic switched to ${env.DEPLOY_VERSION} version"
                }
            }
        }
        
        stage('Cleanup Old Version') {
            steps {
                script {
                    // Optional: Scale down old version after successful deployment
                    timeout(time: 5, unit: 'MINUTES') {
                        input message: "Scale down old version (${env.CURRENT_VERSION})?", ok: "Yes"
                    }
                    sh "kubectl scale deployment sample-app-${env.CURRENT_VERSION} --replicas=0"
                }
            }
        }
    }
    
    post {
        failure {
            script {
                // Rollback on failure
                sh """
                    kubectl patch service sample-app-service -p '{"spec":{"selector":{"version":"${env.CURRENT_VERSION}"}}}'
                """
                echo "Rolled back to ${env.CURRENT_VERSION} version"
            }
        }
    }
}
